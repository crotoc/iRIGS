#!/usr/bin/env Rscript
suppressMessages(require(pacman))
suppressMessages(require(optparse))

option_list <- list(
    make_option(c("--cand_loci"), action="store",
                default="/nobackup/cgg/chenr6/subGWAS/svm_test/gwas_file/scz.108.fmt",
                type="character",
                help="SNP files [default: %default]"),
    make_option(c("--cand_gene"), action="store",
                default="NULL",
                type="character",
                help="candidate gene in each loci region [default: %default]"),
    make_option(c("--gene_symbol"), action="store",
                default="/nobackup/cgg/chenr6/Database/Gibbs_data_from_quan/newcopy/53934_transcribed_genes_GencodeV12_with_official_symbol",
                type="character",
                help="Gene symbols file used for extract genes in each loci region [default: %default]"),
    make_option(c("--network"), action="store",
                default="/fs0/chenr6/Database_fs0/Gibbs/network/go_propogation_probality_rp_0.3.RData",
                type="character",
                help="Network: go [default: %default]"),
    make_option(c("--evaluate_region"), action="store",
                default=FALSE,
                type="logical",
                help="whether to evaluate the risk of regions [default: %default]"),
    make_option(c("--res_prob"), action="store",
                default=0.3,
                type="numeric",
                help="The restart probability of random walk: 0.1, 0.3, 0.5, and 0.7 [default: %default]"),
    make_option(c("--window_size"), action="store",
                default=1e6,
                type="numeric",
                help="The length (basepairs) to be extended to extract candidate genes [default: %default]"),
    make_option(c("--after_burnin_round"), action="store",
                default=1000,
                type="integer",
                help=" how many round used after burnin [default: %default]"),
    make_option(c("--threads"), action="store",
                default=25,
                type="integer",
                help=" how many threads [default: %default]"),
    make_option(c("--burnin_round"), action="store",
                default=1000,
                type="integer",
                help=" how many round used after burnin [default: %default]"),
    make_option(c("--p_thres"), action="store",
                default=0.05,
                type="numeric",
                help="P value threshold usedto select the extra evidence [default: %default]"),
    make_option(c("--extra_evi_path"), action="store",
                default="NULL",
                type="character",
                help="Extra evidence path; Leave as NULL if no extra evidence 
                [default: %default]"),
    make_option(c("--extra_evi_prefix"), action="store",
                default="^extra",
                type="character",
                help="extra evidence file prefix in the extra path/greater [default: %default]"),
    make_option(c("--extra_evi_file"), action="store",
                default="NULL",
                type="character",
                help="Extra evidence file; NULL if no extra evidence 
                [default: %default]"),
    make_option(c("--generic_evi_path"), action="store",
                default="NULL",
                type="character",
                help="Generic evidence file; NULL to use no generic evi. Columns names must contain less/greater [default: %default]"),
    make_option(c("--generic_evi_prefix"), action="store",
                default="^generic",
                type="character",
                help="Generic evidence file prefix in the generic path/greater [default: %default]"),
    make_option(c("--generic_evi_file"), action="store",
                default="NULL",
                type="character",
                help="Generic evidence file; NULL to use no generic evi. Columns names must contain less/greater [default: %default]"),
    make_option(c("--quick_mode"), action="store",
                default="NULL",
                type="character",
                help=" networkonly, generic [default: %default]"),
    make_option(c("--fillNA"), action="store",
                default="min",
                type="character",
                help="Funciton used for filling NA in evidence file [default: %default]"),
    make_option(c("--res_path"), action="store",
                default="./",
                type="character",
                help="Path of result files [default: %default]"),
    make_option(c("--bf_mode"), action="store",
                default="rui",
                type="character",
                help="How to calculate the Bayes Factor of SNP regions [default: %default]"),
    make_option(c("--testmode"), action="store",
                default=FALSE,
                type='logical',
                help="Test mode [default: %default]"),
    make_option(c("--method"), action="store",
                default="NULL",
                type="character",
                help=" [default: %default]"),
    make_option(c("--method_interval"), action="store",
                default=1,
                type="integer",
                help=" how many round used after burnin [default: %default]"),
    make_option(c("--method_weight_power"), action="store",
                default=1,
                type="numeric",
                help=" how many round used after burnin [default: %default]"),
    make_option(c("--progress_bar"),action="store",
                default=TRUE,
                type='logical',help="Progressing Bar [default: %default]"),
    make_option(c("--fast_converge"),action="store",
                default=TRUE,
                type='logical',help="Use the remaining genes from evidence step to fasten converge [default: %default]"),
    make_option(c("--distance"),action="store",
                default=FALSE,
                type='logical',help="Whether include TSS DISTANCE TO SNP as evi [default: %default]"),
    make_option(c("--out_dif"), action="store",
                default=FALSE,
                type="logical",
                help=" [default: %default]"),
    make_option(c("--dif_threshold"), action="store",
                default=0.01,
                type="double",
                help=" [default: %default]"),
    make_option(c("--resample_prob"), action="store",
                default=0.9,
                type="double",
                help=" [default: %default]"),
    make_option(c("--embed.resample.prob"), action="store",
                default=0.7,
                type="double",
                help=" [default: %default]"),
    make_option(c("--ntrees"), action="store",
                default=1000,
                type="integer",
                help=" [default: %default]"),
    make_option(c("--extracted_candidates"), action="store",
                default=NA,
                type="character",
                help=" [default: %default]"),
    make_option(c("--debug"), action="store",
                default=FALSE,
                type="logical",
                help=" [default: %default]"),
    make_option(c("--verbos"), action="store",
                default=TRUE,
                type="logical",
                help=" [default: %default]"),
    make_option(c("--max_gene"), action="store",
                default=20,
                type="integer",
                help=" [default: %default]"),
    make_option(c("--res_prefix"), action="store",
                default=0,
                type="character",
                help="Prefix of result files [default: value of cand_gene]"),
    make_option(c("--burnin_start"), action="store",
                default="random",
                type="character",
                help=" [default: %default]"),
    make_option(c("--configfile"), action="store",
                default="1",
                type="character",
                help=" [default: %default]"),
    make_option(c("--test"), action="store",
                default=FALSE,
                type="logical",
                help=" [default: %default]")
)

opt <- parse_args(OptionParser(option_list=option_list))

if(opt$test){
    save.image(file="1.rda")
    stop("debug")
}

suppressMessages(require(magrittr))
suppressMessages(require(data.table))
suppressMessages(require(doParallel))
suppressMessages(library(iRIGS))
suppressMessages(require(stringi))
suppressMessages(require(devtools))
suppressMessages(require(roxygen2))
suppressMessages(require(RLT))

parameter_file <- paste(format(Sys.time(), "%Y%m%d-%H%M-"),stri_rand_strings(1,5,pattern="[A-Z]"),".param",sep="")

if(!dir.exists(opt$res_path)) dir.create(opt$res_path,showWarnings=T,recursive=T)

if(opt$quick_mode=="networoknly"){
    opt$generic_evi_path="NULL"
    opt$generic_evi_file="NULL"
    opt$extra_evi_path="NULL"
    opt$extra_evi_file="NULL"
    opt$method <- "NULL"
}else if(opt$quick_mode=="generic"){
    opt$generic_evi_prefix="^generic"
    opt$generic_evi_file="/nobackup/cgg/chenr6/Database/Extra_evidence/rui_generic/generic.evi.fmt"
    opt$extra_evi_path="NULL"
    opt$extra_evi_file="/nobackup/cgg/chenr6/Database/Extra_evidence/rui_extra/extra_generic.evi.fmt"
    opt$network="/nobackup/cgg/chenr6/Database/Gibbs_data_from_quan/go_propogation_probality_rp_0.3.RData"
    opt$method <- "NULL"
}else if(opt$quick_mode=="genericfs0"){
    opt$generic_evi_prefix="^generic"
    opt$generic_evi_file="/fs0/chenr6/Database_fs0/Gibbs/Extra_evidence/rui_generic/generic.evi"
    opt$extra_evi_path="NULL"
    opt$extra_evi_file="/fs0/chenr6/Database_fs0/Gibbs/Extra_evidence/rui_extra/generic.evi"
    opt$method <- "NULL"
}else if(opt$quick_mode=="all"){
    opt$generic_evi_prefix="^generic"
    opt$generic_evi_file="/nobackup/cgg/chenr6/Database/Extra_evidence/rui_generic/generic.evi.fmt"
    opt$extra_evi_path="/nobackup/cgg/chenr6/Database/Extra_evidence/rui_extra/"
    opt$extra_evi_file="NULL"
}else if(opt$quick_mode=="rf"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/gtex_brainspan_FantomHumanExpr_FantomMouseExpr_FantomCAGE_4generic/"
    opt$extra_evi_prefix="^."
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/generic/generic.evi"
    opt$generic_evi_path="NULL"
}else if(opt$quick_mode=="rf_brainspan"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/brainspan_4generic/"
    opt$extra_evi_prefix="^."
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/generic/generic.evi"
    opt$generic_evi_path="NULL"
}else if(opt$quick_mode=="rf_gtex_specificity"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/gtex_specificity/"
    opt$extra_evi_prefix="^net"
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/generic/generic.evi"
    opt$generic_evi_path="NULL"
}else if(opt$quick_mode=="rf_bs_specificity"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/bs_specificity/"
    opt$extra_evi_prefix="^net"
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/generic/generic.evi"
    opt$generic_evi_path="NULL"
}else if(opt$quick_mode=="rf_sczgeneric_gtex_specificity"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/gtex_specificity/"
    opt$extra_evi_prefix="^net"
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/scratch/cgg/chenr6/Database/Extra_evidence/rui_generic/generic.evi"
    opt$generic_evi_path="NULL"
}else if(opt$quick_mode=="rf_sczgeneric_bs_specificity"){
    opt$method <- "rf"
    opt$extra_evi_path="/gpfs23/scratch/cgg/chenr6/subGWAS/sub_loci/use_prioritizaion/bs_specificity/"
    opt$extra_evi_prefix="^net"
    opt$extra_evi_file="NULL"
    opt$generic_evi_file="/scratch/cgg/chenr6/Database/Extra_evidence/rui_generic/generic.evi"
    opt$generic_evi_path="NULL"
}


write.table(data.table(name=names(opt),param=unlist(opt)),paste(opt$res_path,"/",parameter_file,sep=""),row.names=FALSE,quote=FALSE,sep="\t")

if(opt$testmode){
    source("/home/chenr6/Rscripts/TEST_GIBBS.R")
    opt <- setParam(opt,method="NULL")
    library(myutils)
    install_my_local("~/Rscripts/mypkg/Gibbs_0.0.0.9004/","Gibbs")
}

if(opt$res_prefix=="0") opt$res_prefix<-tail(unlist(strsplit(opt$cand_gene,"/")),1)


cat("MODE: Generic Path ",opt$generic_evi_path,"\n")
cat("MODE: Generic File ",opt$generic_evi_file,"\n")
cat("MODE: Extra Path ",opt$extra_evi_path,"\n")
cat("MODE: Extra File ",opt$extra_evi_file,"\n")
    



start.time <- Sys.time()
####################################################################
#######		Get network file
#####################################################################
##opt$transp <- load_network(opt)
opt$transp <- opt$network

cat("EXTRACT the network file: ",opt$transp,"\n")
cat("Loading propagation probabilities...\n")
load(opt$transp)
opt$nodes <- colnames(pro_p)

####################################################################
#######		For debug each fucntion
#####################################################################
## source("~/Rscripts/mypkg/iRIGS/R/extract_candidates.R")

## source("~/Rscripts/mypkg/iRIGS/R/evi_direction.R")
## source("~/Rscripts/mypkg/iRIGS/R/generic_evi.R")
## source("~/Rscripts/mypkg/iRIGS/R/extra_evi.R")
## source("~/Rscripts/mypkg/iRIGS/R/mahalanobis_transformation.R")


## source("~/Rscripts/mypkg/iRIGS/R/post_burnin.R")
## source("~/Rscripts/mypkg/iRIGS/R/sampling.R")
## source("~/Rscripts/mypkg/iRIGS/R/predict_gene.R")

## source("~/Rscripts/mypkg/iRIGS/R/joint_dis.R")

####################################################################
#######		Extract genes from SNP region using Quan
#####################################################################

if(opt$cand_gene == "NULL"){
    cat("EXTRACT genes from regions",opt$cand_loci,"\n")
    opt$gene<-extract_candidates(opt)
    write.table(opt$gene,file=paste(opt$res_path,"/",opt$res_prefix,".genesInRegion",sep=""),sep="\t",row.names=F,quote=F)
}else{
    cat("READ genes from regions",opt$cand_gene,"\n")
    opt$gene<- fread(opt$cand_gene,stringsAsFactors = FALSE) 
}

####################################################################
#######		extract network info for each gene
#####################################################################

opt$region <- split(opt$gene$official_name,opt$gene$SNP)
cat(paste(length(unique(opt$gene$official_name)),"unique genes (in ",nrow(opt$gene),"genes) from",length(opt$region),"loci were found with propagation probability...\n"))
opt$pro_p<-pro_p[,(is.element(opt$nodes,unique(opt$gene$official_name)))] %>% data.table

pro_p <- NULL
gc()

####################################################################
#######		process generic evidance
#####################################################################
cat("Processing generic features...\n")
opt$generic<-generic_evi(opt)

write.table(opt$generic$generic_processed,file=paste(opt$res_path,"/",opt$res_prefix,".generic.processed",sep=""),sep="\t",row.names=F,quote=F)
write.table(opt$generic$generic_weight,file=paste(opt$res_path,"/",opt$res_prefix,".generic.weight",sep=""),sep="\t",row.names=F,quote=F)


cat("Generating training data to choose extra evidence features...\n")
opt$training_gene<-post_burnin(opt,evi_mode="generic",with_region = FALSE,run_mode="training")


####################################################################
#######		Save RData
#####################################################################
cat("save training...\n")
save.image(file=paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_posterior_probability.training.RData",sep=""))


####################################################################
#######		process extra evidance
#####################################################################

cat("Processing evi features...\n")
cat("Selecting extra evidence based on training data...\n")
opt$evi<-extra_evi(opt)

if(!is.null(opt$evi$evi_processed))
    write.table(opt$evi$evi_processed,file=paste(opt$res_path,"/",opt$res_prefix,".evi.processed",sep=""),sep="\t",row.names=F,quote=F)

if(!is.null(opt$evi$evi_weight))
    write.table(opt$evi$evi_weight,file=paste(opt$res_path,"/",opt$res_prefix,".evi.weight",sep=""),sep="\t",row.names=F,quote=F)

if(!is.null(opt$evi$evi_pvalue))
write.table(opt$evi$evi_pvalue,file=paste(opt$res_path,"/",opt$res_prefix,".evi.pvalue",sep=""),sep="\t",row.names=F,quote=F)

####################################################################
#######		Use extra evi to sample risk genes
#####################################################################

if(opt$fast_converge & is.null(opt$remaining)){
    cat("Use resulting genes from burnin step as the start of post-burnin step...\n")
    opt$remaining <- opt$training_gene$remaining
}


cat("Sampling risk genes by extra evi weight...\n")
if(opt$evaluate_region){
    opt$pg <-post_burnin(opt,evi_mode="evi",with_region =TRUE,run_mode="identification")
} else{
    opt$pg<-post_burnin(opt,evi_mode="evi",with_region=FALSE,run_mode="identification")
}

####################################################################
#######		Calculate joint distribution of genes
#####################################################################

opt$joi_dis <- joint_dis(opt)

save(opt,file=paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_posterior_probability.RData",sep=""))

out.train <- NULL
out.train$pp <- opt$training_gene$count[,c("official_name","p","SNP","region_p"),]
nperloci <- table(out.train$pp$SNP)
out.train$pp <- merge(out.train$pp,opt$gene,by=c("official_name","SNP"))
out.train$pp[,ngene:=nperloci[SNP]][,score:=p*ngene]
setcolorder(out.train$pp,c(1,3,2,4:ncol(out.train$pp)))
out.train$pp[,chr:=gsub("chr","",chr)]
out.train$pp <- out.train$pp[order(SNP,-p),]
out.train$chosen <- opt$training_gene$chosen

res.freq.file<-paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_posterior_probability_training",sep="")
write.table(out.train$pp,res.freq.file,quote=F,row.names=F,sep="\t")

res.chosen.file<-paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_predicted_genes_each_round_training",sep="")
write.table(out.train$chosen,res.chosen.file,quote=F,row.names=F,sep="\t")


out <- NULL
out$pp <- opt$pg$count[,c("official_name","p","SNP","region_p"),]
nperloci <- table(out$pp$SNP)
out$pp <- merge(out$pp,opt$gene,by=c("official_name","SNP"))
out$pp[,ngene:=nperloci[SNP]][,score:=p*ngene]
setcolorder(out$pp,c(1,3,2,4:ncol(out$pp)))
out$pp[,chr:=gsub("chr","",chr)]
out$pp <- out$pp[order(SNP,-p),]
out$chosen <- opt$pg$chosen



res.freq.file<-paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_posterior_probability",sep="")
write.table(out$pp,res.freq.file,quote=F,row.names=F,sep="\t")

res.chosen.file<-paste(opt$res_path,"/",opt$res_prefix,"_gibbs_sampling_","rp_",opt$res_prob,"_predicted_genes_each_round",sep="")
write.table(out$chosen,res.chosen.file,quote=F,row.names=F,sep="\t")

end.time <- Sys.time()
time.taken <- end.time - start.time
cat(paste("All analysis finished in ",format(time.taken),"\n"))

q("no")
